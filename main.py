from PIL import Image
import numpy as np
from matplotlib import pyplot as plt

img = Image.open('img.png').convert('RGB')
pic = np.array(img)
shape = pic.shape
img.close()

exit_fl = False
vertexes = []

# поиск первой вершины сверху картинки
for i in range(shape[0]):
    for j in range(shape[1]):
        if pic[i, j][0] == 0:
            # plt.plot(j, i, 'ro')
            vertexes.append((j, i))
            print(f'vertex in ({i},{j})')
            exit_fl = True
            break
    
    if exit_fl == True:
        break        

# находясь в первой вершине, создадим набор лучей, выходящих из этой точки
# и считаем количество чёрных пикселей по этому лучу
angs = np.linspace(0, 2 * np.pi, 100)
ss = []
length = int((shape[0] ** 2 + shape[1] ** 2) ** 0.5)

for ang in angs:
    currs = 0
    print(ang)

    for t in range(length):
        x = int(vertexes[0][0] + t * np.cos(ang))
        y = int(vertexes[0][1] + t * np.sin(ang))

        if x >= shape[1] or x <= 0 or y >= shape[0] or y <= 0:
            break

        currs += (0 if pic[y, x][0] == 255 else 1)
    ss.append(currs)

# строим зависимость количества чёрных точек от направления луча
plt.plot(angs, ss)
plt.show()

# здесь получается некоторый график, количество локальных максимумов на котором равно числу направлений, выходящих из этой вершины. 
# проходя по этим направлениям, попадём в другие вершины и в них аналогичным образом можем найти выходящие из этой вершины стороны графа.
# таким образом найдём все вершины и все стороны графа, откуда их пересечения можно найти очевидныи образом.

# алгоритм поиска пересечений можно реализовать иным образом: генерируем набор прямых под разными углами (от 0 до 360 с некоторым шагом) 
# и пробегаем этой прямой по плоскости рисунка в каждой точке. Если в данной точке прямая совпадает с некоторой стороной графа, то сумма 
# чёрных точек вдоль этой прямой будет максимальна. Таким образом, поиск сторон графа сведётся к поиску максимума для данного угла наклона
# прямой на множестве точек рисунка. Далее, найдя все стороны, можно найти пересечения этих сторон исключая при этом те точки, за которыми 
# прямая пересечёт край рисунка (эти точки будут вершинами, они нам не нужны)